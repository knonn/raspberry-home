#!/usr/bin/python
import RPi.GPIO as GPIO
import time
from time import sleep, strftime
from datetime import datetime
from subprocess import *
import psutil

# Supprimer messages warnings
GPIO.setwarnings(False)
 
# Definition des ports GPIO
LCD_RS = 7
LCD_E  = 8
LCD_D4 = 25
LCD_D5 = 24
LCD_D6 = 23
LCD_D7 = 18
 
# Definition caracteristiques
LCD_WIDTH = 16    # Maximum characters per line
LCD_CHR = True
LCD_CMD = False
 
LCD_LINE_1 = 0x80 # LCD RAM address for the 1st line
LCD_LINE_2 = 0xC0 # LCD RAM address for the 2nd line 
 
# Timing
E_PULSE = 0.00005
E_DELAY = 0.00005
 
def main():
 
  GPIO.setmode(GPIO.BCM)       # Use BCM GPIO numbers
  GPIO.setup(LCD_E, GPIO.OUT)  # E
  GPIO.setup(LCD_RS, GPIO.OUT) # RS
  GPIO.setup(LCD_D4, GPIO.OUT) # DB4
  GPIO.setup(LCD_D5, GPIO.OUT) # DB5
  GPIO.setup(LCD_D6, GPIO.OUT) # DB6
  GPIO.setup(LCD_D7, GPIO.OUT) # DB7
 
  # Initialisation
  lcd_init()
 
  # Declaration variable

  # Afficher IP complete
  #cmd = "ip addr show eth0 | grep inet | awk '{print $2}' | cut -d/ -f1"

  # Afficher 2 derniers char IP
  cmd = "ip addr show eth0 | grep inet | awk '{print $2}' | cut -c11-12"

  # Run cmd pour IP
  def run_cmd(cmd):
    p = Popen(cmd, shell=True, stdout=PIPE)
    output = p.communicate()[0]
    return output

  ipaddr = run_cmd(cmd)

  lcd = 0xCD

  while 1:
    # Definition % CPU
    cpu = psutil.cpu_percent(interval=None)
    # Send msg
    lcd_byte(LCD_LINE_1, LCD_CMD)
    lcd_string(datetime.now().strftime("%d %b     %H:%M"))
    lcd_byte(LCD_LINE_2, LCD_CMD)
    lcd_string('IP .%s   CPU' % ipaddr[:-1])
    lcd_byte(lcd, LCD_CMD)
    # Reglages CPU
    if cpu < 10:
        cpu = 0
	lcd_byte(0xCF, LCD_CMD)
	lcd_string('%s' % cpu)
    elif cpu > 10 and cpu < 20:
        cpu = 20
	lcd_byte(0xCE, LCD_CMD)
        lcd_string('%s' % cpu)
    elif cpu > 20 and cpu < 30:
        cpu = 30
	lcd_byte(0xCE, LCD_CMD)
        lcd_string('%s' % cpu)
    elif cpu > 30 and cpu < 40:
        cpu = 40
	lcd_byte(0xCE, LCD_CMD)
        lcd_string('%s' % cpu)
    elif cpu > 40 and cpu < 50:
        cpu = 50
	lcd_byte(0xCE, LCD_CMD)
        lcd_string('%s' % cpu)
    elif cpu > 50 and cpu < 60:
        cpu = 60
	lcd_byte(0xCE, LCD_CMD)
        lcd_string('%s' % cpu)
    elif cpu > 60 and cpu < 70:
        cpu = 70
	lcd_byte(0xCE, LCD_CMD)
        lcd_string('%s' % cpu)
    elif cpu > 70 and cpu < 80:
        cpu = 80
	lcd_byte(0xCE, LCD_CMD)	
        lcd_string('%s' % cpu)
    elif cpu > 80 and cpu < 90:
        cpu = 90
	lcd_byte(0xCE, LCD_CMD)
        lcd_string('%s' % cpu)
    elif cpu > 90:
        cpu = 100
	lcd_byte(0xCD, LCD_CMD)
        lcd_string('%s' % cpu)
    time.sleep(1)

# Init de l'affichage 
def lcd_init():
  lcd_byte(0x33,LCD_CMD)
  lcd_byte(0x32,LCD_CMD)
  lcd_byte(0x28,LCD_CMD)
  lcd_byte(0x0C,LCD_CMD)
  lcd_byte(0x06,LCD_CMD)
  lcd_byte(0x01,LCD_CMD)  

# Envoi de messages 
def lcd_string(message):
 
  message = message.ljust(LCD_WIDTH," ")  
 
  for i in range(LCD_WIDTH):
    lcd_byte(ord(message[i]),LCD_CHR)
 
def lcd_byte(bits, mode):
  # Send byte to data pins
  # bits = data
  # mode = True  for character
  #        False for command
 
  GPIO.output(LCD_RS, mode) # RS
 
  # High bits
  GPIO.output(LCD_D4, False)
  GPIO.output(LCD_D5, False)
  GPIO.output(LCD_D6, False)
  GPIO.output(LCD_D7, False)
  if bits&0x10==0x10:
    GPIO.output(LCD_D4, True)
  if bits&0x20==0x20:
    GPIO.output(LCD_D5, True)
  if bits&0x40==0x40:
    GPIO.output(LCD_D6, True)
  if bits&0x80==0x80:
    GPIO.output(LCD_D7, True)
 
  # Toggle 'Enable' pin
  time.sleep(E_DELAY)
  GPIO.output(LCD_E, True)
  time.sleep(E_PULSE)
  GPIO.output(LCD_E, False)
  time.sleep(E_DELAY)      
 
  # Low bits
  GPIO.output(LCD_D4, False)
  GPIO.output(LCD_D5, False)
  GPIO.output(LCD_D6, False)
  GPIO.output(LCD_D7, False)
  if bits&0x01==0x01:
    GPIO.output(LCD_D4, True)
  if bits&0x02==0x02:
    GPIO.output(LCD_D5, True)
  if bits&0x04==0x04:
    GPIO.output(LCD_D6, True)
  if bits&0x08==0x08:
    GPIO.output(LCD_D7, True)
 
  # Toggle 'Enable' pin
  time.sleep(E_DELAY)
  GPIO.output(LCD_E, True)
  time.sleep(E_PULSE)
  GPIO.output(LCD_E, False)
  time.sleep(E_DELAY)   
 
if __name__ == '__main__':
  main()
